"""
This file was created by Sebastian Gruenwald on 14.11.2024, Neuhausen am Rheinfall.

Contact:
  - Email: sebiscodes@gmail.com

Social Links:
  - GitHub: https://github.com/sebiscodes
  - Instagram: https://www.instagram.com/sebisprojects/
  - YouTube: https://www.youtube.com/@sebisprojects
  - Linktree: https://linktr.ee/sebisprojects

Note: Comments were generated by ChatGPT
"""

class SHLSEncoder:
    """
    SHLSEncoder encodes Python dictionaries or lists into SHLS (Sebis Hierarchical List Structure) format.
    
    The SHLS format uses indentation to represent hierarchy, ensuring compact and token-efficient data serialization.
    
    Attributes:
        indentation (str): Defines the indentation for each hierarchical level (default is a single space).
    """
    def __init__(self):
        """
        Initializes the SHLSEncoder with default indentation settings.
        """
        self.indentation = " "  # Single space for indentation

    def encode(self, data):
        """
        Encodes a Python dictionary or list into SHLS format.

        - Ensures the top-level elements are wrapped in a list for uniformity.
        - Creates a header section that defines the data structure (keys).
        - Serializes values into the SHLS format using indentation to represent hierarchy.

        Args:
            data (dict or list): The data to encode.

        Returns:
            str: The encoded SHLS string.
        """
        # Ensure top-level data is uniform by wrapping single objects in a list
        if isinstance(data, dict):
            for key in data:
                if not isinstance(data[key], list):
                    # Wrap non-list values into a list for consistent processing
                    data[key] = [data[key]]
        
        # Generate the SHLS header and values sections
        header = self.__generate_header(data)
        values = self.__encode_values(data)
        
        # Combine the header and values with a blank line separator
        return f"{header}\n\n{values}"

    def __generate_header(self, data, level=0):
        """
        Recursively generates the SHLS header section, defining the data structure.

        - For dictionaries, lists the keys and recurses into nested structures.
        - For lists of dictionaries, uses the first dictionary as a schema for keys.

        Args:
            data (dict or list): The data structure to analyze.
            level (int): The current indentation level.

        Returns:
            str: The header section of the SHLS string.
        """
        lines = []
        if isinstance(data, dict):
            for key, value in data.items():
                # Add the key with proper indentation
                lines.append(f"{self.indentation * level}{key}")
                # Recurse for nested dictionaries or lists
                if isinstance(value, (dict, list)):
                    lines.append(self.__generate_header(value, level + 1))
        elif isinstance(data, list) and data:
            if isinstance(data[0], dict):
                # Use the first dictionary in the list as the schema for keys
                for key in data[0].keys():
                    lines.append(f"{self.indentation * level}{key}")
                    # Recurse for nested structures in the first dictionary
                    if isinstance(data[0][key], (dict, list)):
                        lines.append(self.__generate_header(data[0][key], level + 1))
        return "\n".join(lines)

    def __encode_values(self, data, level=0):
        """
        Recursively encodes the data values into the SHLS format.

        - Processes dictionaries by writing keys and their values hierarchically.
        - Processes lists by iterating through each item and handling nested structures.

        Args:
            data (dict or list): The data structure to encode.
            level (int): The current indentation level.

        Returns:
            str: The values section of the SHLS string.
        """
        lines = []
        if isinstance(data, dict):
            for key, value in data.items():
                # Add the key as a top-level entry
                lines.append(f"{key}")
                if isinstance(value, list):
                    # Recursively encode lists at the next indentation level
                    lines.append(self.__encode_values(value, level + 1))
                else:
                    # Encode a single value with proper indentation
                    lines.append(f"{self.indentation * (level + 1)}{value}")
        
        elif isinstance(data, list):
            for item in data:
                if isinstance(item, dict):
                    # Process dictionaries inside the list
                    for key, value in item.items():
                        if isinstance(value, (dict, list)):
                            # Recurse for nested dictionaries or lists
                            lines.append(f"{self.indentation * level}{key}")
                            lines.append(self.__encode_values(value, level + 1))
                        else:
                            # Add simple values with indentation
                            lines.append(f"{self.indentation * level}{value}")
                else:
                    # Add non-dictionary items directly
                    lines.append(f"{self.indentation * level}{item}")
        
        return "\n".join(lines)
